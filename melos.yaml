name: MinecraftCube
# repository: https://github.com/NOTREADY

packages:
  - packages/**
  - "tests/*"

command:
  version:
    # Generate commit links in package changelogs.
    # linkToCommits: true
    # Only allow versioning to happen on main branch.
    branch: master
    # Additionally build a changelog at the root of the workspace.
    workspaceChangelog: true

scripts:
  upgrade:all:
    run: flutter pub run melos exec -c 1 -- \
      dart pub upgrade --major-versions

  lint:all:
    run: flutter pub run melos run analyze && flutter pub run melos run format
    description: Run all static analysis checks.

  analyze:
    run: >-
      flutter pub run melos exec -c 5 -- \
        dart analyze . --fatal-infos
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.
  format:
    run: >-
      dart format . --set-exit-if-changed &&
      flutter pub run melos exec -c 1 -- \
      dart format . --set-exit-if-changed
# dart pub global run flutter_plugin_tools format && \
# swiftformat .
    description: |
      format codes
# Build a specific example app for Android.
#  - Requires `flutter_plugin_tools` (`pub global activate flutter_plugin_tools`).
#  - Requires `clang-format` (can be installed via Brew on macOS).
      #  - Requires `swiftformat` (can be installed via Brew on macOS).
  build:all:
    run: >-
      flutter pub run melos bootstrap
# melos run build:example_ios_pub --no-select && \
# melos run build:example_android_pub --no-select && \
# melos run build:example_macos --no-select && \
    description: Build all example apps.

  # build:example_android:
  #   run: |
  #     melos exec -c 6 --fail-fast -- \
  #       "flutter build apk --no-pub"
  #   description: Build a specific example app for Android.
  #   select-package:
  #     dir-exists:
  #       - android
  #     scope: "*example*"

  # melos bootstrap does not generate all files generated by a build that runs
  # `pub get`, and `flutter drive` does not either, so it is still necessary to
  # build sometimes without the `--no-pub` switch. Careful: `melos bootstrap` after.
  # build:example_android_pub:
  #   run: |
  #     melos exec -c 6 --fail-fast -- \
  #       "flutter build apk"
  #   description: Build a specific example app for Android.
  #   select-package:
  #     dir-exists:
  #       - android
  #     scope: "*example*"

  # build:example_ios:
  #   run: |
  #     melos exec -c 6 --fail-fast -- \
  #       "flutter build ios --no-codesign --no-pub"
  #   description: Build a specific example app for iOS.
  #   select-package:
  #     dir-exists:
  #       - ios
  #     scope: "*example*"

  # melos bootstrap does not generate all files generated by a build that runs
  # `pub get`, and `flutter drive` does not either, so it is still necessary to
  # build sometimes without the `--no-pub` switch. Careful: `melos bootstrap` after.
  # build:example_ios_pub:
  #   run: |
  #     melos exec -c 6 --fail-fast -- \
  #       "flutter build ios --no-codesign"
  #   description: Build a specific example app for iOS.
  #   select-package:
  #     dir-exists:
  #       - ios
  #     scope: "*example*"

  # build:example_macos:
  #   run: |
  #     melos exec -c 6 --fail-fast -- \
  #       "flutter build macos --no-pub"
  #   description: |
  #     Build a specific example app for macOS.
  #   select-package:
  #     dir-exists:
  #       - macos
  #     scope: "*example*"

  test:all:
    run: >-
      flutter pub run melos run test --no-select &&
      flutter pub run melos run test:integration --no-select
# melos run test:web --no-select && \
# melos run test:e2e --no-select
    description: |
      Run all tests available.
  test:
    run: >-
      flutter test --exclude-tags integration && 
      flutter pub run melos exec -c 1 --fail-fast -- \
        flutter test --exclude-tags integration
    description: Run `flutter test` for a specific package.
    select-package:
      dir-exists:
        - test
      ignore:
        - "*web*"
        - "*odm*"
        - "*example*"
  test:integration:
    # flutter test --tags integration && 
    run: >-
      flutter pub run melos exec -c 1 -- \
        flutter test -j1 --tags integration
    description: |
      Run all integration tests.
    select-package:
      dir-exists:
        - test

  # test:web:
  #   run: |
  #     melos exec -c 1 --fail-fast -- \
  #       "flutter test --no-pub --platform=chrome"
  #   description: Run `flutter test --platform=chrome` for a specific '*web' package.
  #   select-package:
  #     dir-exists:
  #       - test
  #     scope: "*web*"

  # test:e2e:
  #   run: |
  #     melos exec -c 1 --fail-fast -- \
  #       "flutter drive --no-pub --target=./test_driver/driver_e2e.dart"
  #   description: |
  #     Run all e2e tests.
  #   select-package:
  #     dir-exists:
  #       - test_driver
  #     scope: "*tests*"

  # test:e2e:web:
  #   run: |
  #     melos exec -c 1 --fail-fast -- \
  #       "flutter drive --no-pub --target=./test_driver/driver_e2e.dart -d chrome"
  #   description: |
  #     Run all e2e tests on web platform. Please ensure you have "chromedriver" installed and running.
  #   select-package:
  #     dir-exists:
  #       - test_driver
  #     scope: "*tests*"

  clean:deep:
    run: git clean -x -d -f -q
    description: Clean things very deeply, can be used to establish "pristine checkout" status.

  qualitycheck:
    run: >-
      flutter pub run melos run clean:deep &&
      flutter pub run melos clean &&
      flutter pub run melos bootstrap &&
      flutter pub run melos run lint:all &&
      flutter pub run melos run build:all &&
      flutter pub run melos run test:all
    description: Run all targets generally expected in CI for a full local quality check.

  # odm:test:
  #   run: |
  #     melos run odm:test:dart &&
  #     melos run odm:test:flutter
  #   description: Run all tests for the ODM.

  # odm:test:dart:
  #   run: |
  #     melos exec -- \
  #       "dart test"
  #   description: Run Dart tests for the ODM.
  #   select-package:
  #     dir-exists: "test"
  #     depends-on: "test"
  #     scope: "*odm*"

  # odm:test:flutter:
  #   run: |
  #     melos exec -- \
  #       "flutter test"
  #   description: Run Flutter tests for the ODM.
  #   select-package:
  #     dir-exists: "test"
  #     no-depends-on: "test"
  #     scope: "*odm*"

  # odm:example_build_runner:build:
  #   run: |
  #     melos exec -- \
  #       "flutter pub run build_runner build --delete-conflicting-outputs"
  #   description: Run a build_runner build in the ODM example app.
  #   select-package:
  #     scope: "*odm_example*"

  # odm:generator_test_build_runner:build:
  #   run: |
  #     melos exec -c 1 -- \
  #       "dart pub get && flutter pub run build_runner build --delete-conflicting-outputs"
  #   description: Run a build_runner build generator test.
  #   select-package:
  #     scope:
  #       - "*odm_generator_integration*"

  # odm:example_build_runner:watch:
  #   run: |
  #     melos exec -c 5 -- \
  #       "flutter pub run build_runner watch --delete-conflicting-outputs"
  #   description: Run build_runner watch in the ODM example app.
  #   select-package:
  #     scope: "*odm_example*"

  # Additional cleanup lifecycle script, executed when `melos clean` is run.
  postclean: >
    flutter pub run melos exec -c 6 -- "flutter clean"